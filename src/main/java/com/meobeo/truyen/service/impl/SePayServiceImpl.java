package com.meobeo.truyen.service.impl;

import com.meobeo.truyen.config.SePayConfig;
import com.meobeo.truyen.domain.entity.SePayTopupRequest;
import com.meobeo.truyen.domain.entity.User;
import com.meobeo.truyen.domain.entity.UserWallet;
import com.meobeo.truyen.domain.entity.WalletTransaction;
import com.meobeo.truyen.domain.enums.TransactionType;
import com.meobeo.truyen.domain.repository.SePayTopupRequestRepository;
import com.meobeo.truyen.domain.request.topup.CreateSePayTopupRequest;
import com.meobeo.truyen.domain.request.topup.SePayWebhookRequest;
import com.meobeo.truyen.domain.response.topup.SePayTopupHistoryResponse;
import com.meobeo.truyen.domain.response.topup.SePayTopupResponse;
import com.meobeo.truyen.exception.BadRequestException;
import com.meobeo.truyen.exception.ResourceNotFoundException;
import com.meobeo.truyen.repository.UserWalletRepository;
import com.meobeo.truyen.repository.WalletTransactionRepository;
import com.meobeo.truyen.repository.TopupPackageRepository;
import com.meobeo.truyen.repository.UserRepository;
import com.meobeo.truyen.service.interfaces.SePayService;
import com.meobeo.truyen.service.interfaces.VoucherService;
import com.meobeo.truyen.service.interfaces.AsyncEmailService;
import com.meobeo.truyen.domain.mapper.SePayMapper;
import com.meobeo.truyen.utils.CurrencyFormatUtil;
import org.springframework.beans.factory.annotation.Value;
import java.time.format.DateTimeFormatter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Service
@RequiredArgsConstructor
@Slf4j
public class SePayServiceImpl implements SePayService {

    private final SePayConfig sePayConfig;
    private final SePayTopupRequestRepository sePayTopupRequestRepository;
    private final UserWalletRepository userWalletRepository;
    private final WalletTransactionRepository walletTransactionRepository;
    private final TopupPackageRepository topupPackageRepository;
    private final VoucherService voucherService;
    private final SePayMapper sePayMapper;
    private final AsyncEmailService asyncEmailService;
    private final UserRepository userRepository;

    @Value("${app.wallet.url}")
    private String walletUrl;

    @Override
    @Transactional
    public SePayTopupResponse createTopupRequest(CreateSePayTopupRequest request, User user) {
        log.info("T·∫°o y√™u c·∫ßu n·∫°p ti·ªÅn SePay cho user {} v·ªõi g√≥i {}", user.getId(), request.getPackageId());

        // Validate TopupPackage
        var topupPackage = topupPackageRepository.findByIdAndIsActiveTrue(request.getPackageId())
                .orElseThrow(() -> new ResourceNotFoundException(
                        "Kh√¥ng t√¨m th·∫•y g√≥i n·∫°p ti·ªÅn v·ªõi ID: " + request.getPackageId()));

        // ======= KI·ªÇM TRA VOUCHER TR∆Ø·ªöC KHI T·∫†O PAYMENT URL =======
        BigDecimal originalAmount = BigDecimal.valueOf(topupPackage.getAmount());
        BigDecimal discountAmount = BigDecimal.ZERO;
        BigDecimal finalAmount = originalAmount;

        if (request.getVoucherCode() != null && !request.getVoucherCode().trim().isEmpty()) {
            try {
                // Ki·ªÉm tra voucher c√≥ h·ª£p l·ªá kh√¥ng
                if (!voucherService.isValidVoucher(request.getVoucherCode(), user.getId())) {
                    throw new BadRequestException("Voucher kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
                }

                // T√≠nh to√°n gi·∫£m gi√°
                var discountResponse = voucherService.calculateDiscount(request.getVoucherCode(), originalAmount);

                if (!discountResponse.isValid()) {
                    throw new BadRequestException(discountResponse.getMessage());
                }

                discountAmount = discountResponse.getDiscountAmount();
                finalAmount = originalAmount.subtract(discountAmount);

                log.info("Voucher {} h·ª£p l·ªá cho user {} v·ªõi g√≥i {}", request.getVoucherCode(), user.getId(),
                        topupPackage.getName());
            } catch (Exception e) {
                log.error("L·ªói ki·ªÉm tra voucher {}: {}", request.getVoucherCode(), e.getMessage());
                throw new BadRequestException("Kh√¥ng th·ªÉ √°p d·ª•ng voucher: " + e.getMessage());
            }
        }

        // T·∫°o m√£ n·ªôi dung chuy·ªÉn kho·∫£n ƒë·ªôc quy·ªÅn
        String transferContent = generateTransferContent(user.getId());

        // Ki·ªÉm tra m√£ n·ªôi dung kh√¥ng tr√πng l·∫∑p
        if (sePayTopupRequestRepository.existsByTransferContent(transferContent)) {
            throw new BadRequestException("M√£ n·ªôi dung chuy·ªÉn kho·∫£n ƒë√£ t·ªìn t·∫°i, vui l√≤ng th·ª≠ l·∫°i");
        }

        // T·∫°o y√™u c·∫ßu n·∫°p ti·ªÅn
        SePayTopupRequest topupRequest = new SePayTopupRequest();
        topupRequest.setUserId(user.getId());
        topupRequest.setAmount(finalAmount); // S·ªë ti·ªÅn th·ª±c t·∫ø ph·∫£i chuy·ªÉn
        topupRequest.setOriginalAmount(originalAmount); // S·ªë ti·ªÅn g·ªëc c·ªßa g√≥i
        topupRequest.setDiscountAmount(discountAmount); // S·ªë ti·ªÅn gi·∫£m gi√°
        topupRequest.setVoucherCode(request.getVoucherCode());
        topupRequest.setTransferContent(transferContent);
        topupRequest.setStatus(SePayTopupRequest.TopupStatus.PENDING);

        SePayTopupRequest savedRequest = sePayTopupRequestRepository.save(topupRequest);

        // T·∫°o response s·ª≠ d·ª•ng mapper
        SePayTopupResponse response = sePayMapper.toTopupResponse(savedRequest, topupPackage);

        log.info("ƒê√£ t·∫°o y√™u c·∫ßu n·∫°p ti·ªÅn th√†nh c√¥ng v·ªõi ID: {}", savedRequest.getId());
        return response;
    }

    @Override
    @Transactional
    public boolean processWebhook(SePayWebhookRequest webhookRequest) {
        log.info("X·ª≠ l√Ω webhook t·ª´ SePay: {}", webhookRequest);

        try {
            // Ki·ªÉm tra lo·∫°i giao d·ªãch (ch·ªâ x·ª≠ l√Ω giao d·ªãch v√†o)
            if (!"in".equalsIgnoreCase(webhookRequest.getTransferType())) {
                log.warn("Kh√¥ng x·ª≠ l√Ω giao d·ªãch ra, transferType: {}", webhookRequest.getTransferType());
                return false;
            }

            // Ki·ªÉm tra giao d·ªãch ƒë√£ x·ª≠ l√Ω ch∆∞a
            if (sePayTopupRequestRepository.findBySepayTransactionId(webhookRequest.getId().toString()).isPresent()) {
                log.warn("Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥: {}", webhookRequest.getId());
                return true; // Tr·∫£ v·ªÅ true v√¨ ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng
            }

            // Tr√≠ch xu·∫•t m√£ n·ªôi dung t·ª´ content
            String transferContent = extractTransferContent(webhookRequest.getContent());
            if (transferContent == null) {
                log.warn("Kh√¥ng t√¨m th·∫•y m√£ n·ªôi dung h·ª£p l·ªá trong content: {}", webhookRequest.getContent());
                return false;
            }

            log.info("üîç T√¨m ki·∫øm y√™u c·∫ßu n·∫°p ti·ªÅn v·ªõi m√£ n·ªôi dung: {}", transferContent);

            // T√¨m y√™u c·∫ßu n·∫°p ti·ªÅn theo m√£ n·ªôi dung
            var optionalTopupRequest = sePayTopupRequestRepository.findByTransferContent(transferContent);

            if (optionalTopupRequest.isEmpty()) {
                // Debug: L·∫•y t·∫•t c·∫£ c√°c y√™u c·∫ßu n·∫°p ti·ªÅn pending ƒë·ªÉ ki·ªÉm tra
                List<SePayTopupRequest> pendingRequests = sePayTopupRequestRepository
                        .findByStatus(SePayTopupRequest.TopupStatus.PENDING);
                log.warn("‚ùå Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu n·∫°p ti·ªÅn v·ªõi m√£ n·ªôi dung: {}", transferContent);
                log.warn("üìã Danh s√°ch c√°c y√™u c·∫ßu n·∫°p ti·ªÅn PENDING trong DB:");
                for (SePayTopupRequest req : pendingRequests) {
                    log.warn("  - ID: {}, TransferContent: {}, Amount: {}, User: {}",
                            req.getId(), req.getTransferContent(), req.getAmount(), req.getUserId());
                }
                throw new ResourceNotFoundException(
                        "Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu n·∫°p ti·ªÅn v·ªõi m√£ n·ªôi dung: " + transferContent);
            }

            SePayTopupRequest topupRequest = optionalTopupRequest.get();
            log.info("‚úÖ T√¨m th·∫•y y√™u c·∫ßu n·∫°p ti·ªÅn: ID={}, User={}, Amount={}, TransferContent={}",
                    topupRequest.getId(), topupRequest.getUserId(), topupRequest.getAmount(),
                    topupRequest.getTransferContent());

            // Ki·ªÉm tra tr·∫°ng th√°i y√™u c·∫ßu
            if (topupRequest.getStatus() != SePayTopupRequest.TopupStatus.PENDING) {
                log.warn("Y√™u c·∫ßu n·∫°p ti·ªÅn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω, status: {}", topupRequest.getStatus());
                return false;
            }

            // Ki·ªÉm tra s·ªë ti·ªÅn kh·ªõp
            log.info(
                    "Ki·ªÉm tra s·ªë ti·ªÅn: expected={} (sau voucher), actual={} (ƒë√£ chuy·ªÉn), original={} (g√≥i g·ªëc), discount={} (gi·∫£m gi√°)",
                    topupRequest.getAmount(), webhookRequest.getTransferAmount(),
                    topupRequest.getOriginalAmount(), topupRequest.getDiscountAmount());

            if (topupRequest.getAmount().compareTo(webhookRequest.getTransferAmount()) != 0) {
                log.error("‚ùå S·ªë ti·ªÅn kh√¥ng kh·ªõp: expected={}, actual={}",
                        topupRequest.getAmount(), webhookRequest.getTransferAmount());
                return false;
            }

            log.info("‚úÖ S·ªë ti·ªÅn kh·ªõp ch√≠nh x√°c");

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u c·∫ßu n·∫°p ti·ªÅn
            topupRequest.setStatus(SePayTopupRequest.TopupStatus.SUCCESS);
            topupRequest.setSepayTransactionId(webhookRequest.getId().toString());
            topupRequest.setProcessedAt(LocalDateTime.now());
            sePayTopupRequestRepository.save(topupRequest);

            // C·ªông ti·ªÅn v√†o v√≠ ng∆∞·ªùi d√πng
            updateUserWallet(topupRequest);

            // T·∫°o l·ªãch s·ª≠ giao d·ªãch
            createWalletTransaction(topupRequest);

            // G·ª≠i email th√¥ng b√°o n·∫°p ti·ªÅn th√†nh c√¥ng
            sendTopupSuccessEmailAsync(topupRequest);

            log.info("X·ª≠ l√Ω webhook th√†nh c√¥ng cho y√™u c·∫ßu n·∫°p ti·ªÅn ID: {}", topupRequest.getId());
            return true;

        } catch (Exception e) {
            log.error("L·ªói x·ª≠ l√Ω webhook SePay", e);
            return false;
        }
    }

    @Override
    public SePayTopupHistoryResponse getTopupHistory(User user, Pageable pageable) {
        log.info("L·∫•y l·ªãch s·ª≠ n·∫°p ti·ªÅn SePay cho user {}", user.getId());

        Page<SePayTopupRequest> page = sePayTopupRequestRepository
                .findByUserIdOrderByCreatedAtDesc(user.getId(), pageable);

        return sePayMapper.toHistoryResponse(page);
    }

    @Override
    @Transactional
    @Scheduled(fixedRate = 300000) // Ch·∫°y m·ªói 5 ph√∫t
    public void processExpiredRequests() {
        log.info("X·ª≠ l√Ω c√°c y√™u c·∫ßu n·∫°p ti·ªÅn h·∫øt h·∫°n");

        LocalDateTime expireTime = LocalDateTime.now().minusMinutes(sePayConfig.getTimeoutMinutes());
        List<SePayTopupRequest> expiredRequests = sePayTopupRequestRepository
                .findPendingRequestsBefore(expireTime);

        for (SePayTopupRequest request : expiredRequests) {
            request.setStatus(SePayTopupRequest.TopupStatus.EXPIRED);
            sePayTopupRequestRepository.save(request);
            log.info("ƒê√£ ƒë√°nh d·∫•u y√™u c·∫ßu n·∫°p ti·ªÅn h·∫øt h·∫°n: {}", request.getId());
        }

        if (!expiredRequests.isEmpty()) {
            log.info("ƒê√£ x·ª≠ l√Ω {} y√™u c·∫ßu n·∫°p ti·ªÅn h·∫øt h·∫°n", expiredRequests.size());
        }
    }

    @Override
    public SePayTopupRequest checkTopupStatus(Long requestId, Long userId) {
        log.info("Ki·ªÉm tra tr·∫°ng th√°i y√™u c·∫ßu n·∫°p ti·ªÅn ID: {} cho user: {}", requestId, userId);

        SePayTopupRequest topupRequest = sePayTopupRequestRepository.findById(requestId)
                .orElseThrow(() -> new ResourceNotFoundException(
                        "Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu n·∫°p ti·ªÅn v·ªõi ID: " + requestId));

        // Ki·ªÉm tra y√™u c·∫ßu c√≥ thu·ªôc v·ªÅ user kh√¥ng
        if (!topupRequest.getUserId().equals(userId)) {
            throw new BadRequestException("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p y√™u c·∫ßu n·∫°p ti·ªÅn n√†y");
        }

        return topupRequest;
    }

    /**
     * T·∫°o m√£ n·ªôi dung chuy·ªÉn kho·∫£n ƒë·ªôc quy·ªÅn
     * Format: NAP{userId}{randomString} (kh√¥ng c√≥ d·∫•u g·∫°ch d∆∞·ªõi)
     */
    private String generateTransferContent(Long userId) {
        String randomString = UUID.randomUUID().toString().substring(0, 8).toUpperCase();
        return String.format("NAP%d%s", userId, randomString);
    }

    /**
     * C·∫≠p nh·∫≠t v√≠ ng∆∞·ªùi d√πng
     */
    private void updateUserWallet(SePayTopupRequest topupRequest) {
        UserWallet wallet = userWalletRepository.findById(topupRequest.getUserId())
                .orElseGet(() -> {
                    UserWallet newWallet = new UserWallet();
                    newWallet.setUserId(topupRequest.getUserId());
                    newWallet.setBalance(0);
                    newWallet.setSpiritStones(0);
                    return newWallet;
                });

        // C·ªông ti·ªÅn v√†o v√≠ (s·ªë ti·ªÅn g·ªëc c·ªßa g√≥i, kh√¥ng ph·∫£i s·ªë ti·ªÅn ƒë√£ gi·∫£m gi√°)
        int oldBalance = wallet.getBalance();
        int addedAmount = topupRequest.getOriginalAmount().intValue();
        wallet.setBalance(oldBalance + addedAmount);
        userWalletRepository.save(wallet);

        log.info(
                "üí∞ C·ªông ti·ªÅn v√†o v√≠: user={}, balance c≈©={}, c·ªông th√™m={}, balance m·ªõi={} (g√≥i g·ªëc: {}, gi·∫£m gi√°: {})",
                topupRequest.getUserId(), oldBalance, addedAmount, wallet.getBalance(),
                topupRequest.getOriginalAmount(), topupRequest.getDiscountAmount());
    }

    /**
     * T·∫°o l·ªãch s·ª≠ giao d·ªãch v√≠
     */
    private void createWalletTransaction(SePayTopupRequest topupRequest) {
        WalletTransaction transaction = new WalletTransaction();
        transaction.setAmount(topupRequest.getOriginalAmount().intValue()); // L∆∞u s·ªë ti·ªÅn g·ªëc v√†o l·ªãch s·ª≠
        transaction.setCurrency(WalletTransaction.CurrencyType.VND);
        transaction.setType(TransactionType.TOPUP);

        String description = "N·∫°p ti·ªÅn qua SePay - " + topupRequest.getTransferContent();
        if (topupRequest.getDiscountAmount().compareTo(BigDecimal.ZERO) > 0) {
            description += String.format(" (Gi·∫£m gi√°: %s VND)", topupRequest.getDiscountAmount());
        }
        transaction.setDescription(description);

        User user = new User();
        user.setId(topupRequest.getUserId());
        transaction.setUser(user);

        walletTransactionRepository.save(transaction);

        log.info("ƒê√£ t·∫°o l·ªãch s·ª≠ giao d·ªãch v√≠ cho user {} v·ªõi s·ªë ti·ªÅn {}",
                topupRequest.getUserId(), topupRequest.getOriginalAmount());
    }

    /**
     * Tr√≠ch xu·∫•t m√£ n·ªôi dung chuy·ªÉn kho·∫£n t·ª´ content c·ªßa SePay
     * Format: "NHAN TU 091890889999 TRACE 554662 ND NAP7E566BF3C"
     * C·∫ßn tr√≠ch xu·∫•t ph·∫ßn sau "ND "
     */
    private String extractTransferContent(String content) {
        if (content == null || content.trim().isEmpty()) {
            log.warn("‚ö†Ô∏è Content r·ªóng ho·∫∑c null");
            return null;
        }

        log.info("üîç ƒêang tr√≠ch xu·∫•t m√£ n·ªôi dung t·ª´ content: '{}'", content);

        // T√¨m ph·∫ßn sau "ND " (n·ªôi dung chuy·ªÉn kho·∫£n)
        String[] parts = content.split("ND ");
        log.info("üîç Split content theo 'ND ': {} parts", parts.length);

        if (parts.length >= 2) {
            String transferContent = parts[1].trim();
            log.info("‚úÖ Tr√≠ch xu·∫•t m√£ n·ªôi dung th√†nh c√¥ng: '{}'", transferContent);
            return transferContent;
        }

        log.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ tr√≠ch xu·∫•t m√£ n·ªôi dung t·ª´ content: '{}'", content);
        return null;
    }

    /**
     * G·ª≠i email th√¥ng b√°o n·∫°p ti·ªÅn th√†nh c√¥ng b·∫•t ƒë·ªìng b·ªô
     */
    private void sendTopupSuccessEmailAsync(SePayTopupRequest topupRequest) {
        try {
            // L·∫•y th√¥ng tin user t·ª´ DB
            User user = userRepository.findById(topupRequest.getUserId()).orElse(null);
            if (user == null) {
                log.warn("Kh√¥ng t√¨m th·∫•y user v·ªõi ID: {}", topupRequest.getUserId());
                return;
            }

            // L·∫•y s·ªë d∆∞ m·ªõi t·ª´ v√≠
            UserWallet userWallet = userWalletRepository.findById(topupRequest.getUserId()).orElse(null);
            String newBalance = userWallet != null ? CurrencyFormatUtil.formatVNDCurrency(userWallet.getBalance())
                    : "0 VNƒê";

            // Format th·ªùi gian
            String time = topupRequest.getProcessedAt() != null
                    ? topupRequest.getProcessedAt().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"))
                    : LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));

            // Format s·ªë ti·ªÅn n·∫°p theo chu·∫©n Vi·ªát Nam
            String formattedAmount = CurrencyFormatUtil.formatVNDCurrency(topupRequest.getOriginalAmount());

            // T√™n g√≥i n·∫°p ti·ªÅn (s·ª≠ d·ª•ng s·ªë ti·ªÅn g·ªëc)
            String packageName = "G√≥i " + CurrencyFormatUtil.formatVNDCurrency(topupRequest.getOriginalAmount());

            // G·ª≠i email b·∫•t ƒë·ªìng b·ªô
            asyncEmailService.sendTopupSuccessEmailAsync(
                    user.getEmail(),
                    user.getDisplayName() != null ? user.getDisplayName() : user.getUsername(),
                    packageName,
                    formattedAmount,
                    newBalance,
                    time,
                    walletUrl);

            log.info("ƒê√£ kh·ªüi t·∫°o g·ª≠i email th√¥ng b√°o n·∫°p ti·ªÅn th√†nh c√¥ng cho user: {}", user.getEmail());

        } catch (Exception e) {
            log.error("L·ªói kh·ªüi t·∫°o g·ª≠i email th√¥ng b√°o n·∫°p ti·ªÅn th√†nh c√¥ng: {}", e.getMessage());
            // Kh√¥ng throw exception v√¨ ƒë√¢y l√† async operation
        }
    }

}
